services:
  # Frontend React application
  frontend:
    build:
      context: ./frontend
      target: development
    ports:
      - "${REACT_PORT}:${REACT_PORT}"  # Maps port 5173 on the host to port 5173 in the container
    volumes:
      - ./frontend:/app  # Mounts the frontend directory for live reloading
      - /app/node_modules  # Anonymous volume to prevent overwriting node_modules
    environment:
      - NODE_ENV=development
    command: sh -c "npm install && npm run dev"
    depends_on:
      - backend  # Ensures backend is started before frontend

  # Backend Express application
  backend:
    build:
      context: ./backend
      target: development
    ports:
      - "${API_PORT}:${API_PORT}"  # Maps port 5001 on the host to port 5001 in the container
    volumes:
      - ./backend:/app  # Mounts the backend directory for live reloading
      - /app/node_modules  # Anonymous volume to prevent overwriting node_modules
    environment:
      - OPENAI_API_KEY
      - REDIS_URL
      - PSQL_HOST
      - PSQL_PORT
      - PSQL_USER
      - PSQL_PASSWORD
      - PSQL_DB_NAME
      - S3_ENDPOINT
      - S3_ACCESS_KEY
      - S3_SECRET_ACCESS_KEY
      - S3_BUCKET_NAME
      - API_PORT
    command: sh -c "npm install && npm run dev"
    depends_on:
      - postgres
      - redis
      - minio

  # PostgreSQL database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${PSQL_DB_NAME}  # Sets the name of the default database
      POSTGRES_USER: ${PSQL_USER}  # Sets the superuser name
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}  # Sets the superuser password
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persists database data
    ports:
      - "${PSQL_PORT}:${PSQL_PORT}"  # Maps port 5432 on the host to port 5432 in the container

  # Redis + RedisStack database
  redis:
    image: redis/redis-stack:latest
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"  # Redis port
      - "${REDIS_INSIGHT_PORT}:${REDIS_INSIGHT_PORT}"  # RedisInsight port
    volumes:
      - redis_data:/data  # Persists Redis data
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD}
      - REDISINSIGHT_DEFAULT_USERNAME=default
      - REDISINSIGHT_DEFAULT_PASSWORD=${REDIS_PASSWORD}

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio
    ports:
      - "${S3_PORT}:${S3_PORT}"  # API port
      - "${S3_CONSOLE_PORT}:${S3_CONSOLE_PORT}"  # Console port
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}  # Default root user for MinIO
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}  # Default root password for MinIO
    command: server /data --console-address ":${S3_CONSOLE_PORT}"  # Starts MinIO server and console
    volumes:
      - minio_data:/data  # Persists MinIO data

# Named volumes for persisting data
volumes:
  postgres_data:
  redis_data:
  minio_data: